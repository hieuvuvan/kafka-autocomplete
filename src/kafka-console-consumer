# bash completion for kafka-(avro-)console-consumer         -*- shell-script -*-

_landoop-consumer-configs()
{
    local cur prev configs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    configs="bootstrap.servers= \
             key.deserializer= \
             value.deserializer= \
             fetch.min.bytes= \
             group.id= \
             heartbeat.interval.ms= \
             max.partition.fetch.bytes= \
             session.timeout.ms= \
             ssl.key.password= \
             ssl.keystore.location= \
             ssl.keystore.password= \
             ssl.truststore.location= \
             ssl.truststore.password= \
             auto.offset.reset= \
             connections.max.idle.ms= \
             enable.auto.commit= \
             exclude.internal.topics= \
             fetch.max.bytes= \
             isolation.level= \
             max.poll.interval.ms= \
             max.poll.records= \
             partition.assignment.strategy= \
             receive.buffer.bytes= \
             request.timeout.ms= \
             sasl.jaas.config= \
             sasl.kerberos.service.name= \
             sasl.mechanism= \
             security.protocol= \
             send.buffer.bytes= \
             ssl.enabled.protocols= \
             ssl.keystore.type= \
             ssl.protocol= \
             ssl.provider= \
             ssl.truststore.type= \
             auto.commit.interval.ms= \
             check.crcs= \
             client.id= \
             fetch.max.wait.ms= \
             interceptor.classes= \
             metadata.max.age.ms= \
             metric.reporters= \
             metrics.num.samples= \
             metrics.recording.level= \
             metrics.sample.window.ms= \
             reconnect.backoff.ms= \
             retry.backoff.ms= \
             sasl.kerberos.kinit.cmd= \
             sasl.kerberos.min.time.before.relogin= \
             sasl.kerberos.ticket.renew.jitter= \
             sasl.kerberos.ticket.renew.window.factor= \
             ssl.cipher.suites= \
             ssl.endpoint.identification.algorithm= \
             ssl.keymanager.algorithm= \
             ssl.secure.random.implementation= \
             ssl.trustmanager.algorithm="

    COMPREPLY=( $(compgen -W "${configs}" -- ${cur}) )
    compopt -o nospace
    return 0
}

_landoop-consumer-isolation-configs()
{
    local cur prev configs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    configs="read_committed \
             read_uncommitted"

    COMPREPLY=( $(compgen -W "${configs}" -- ${cur}) )
    compopt -o nospace
    return 0
}

_landoop-kafka-console-consumer() {
    local cur prev opts wotherarg wfileargs wdirargs allopts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    wotherarg="--blacklist \
               --bootstrap-server \
               --consumer-property \
               --formatter \
               --isolation-level \
               --key-deserializer \
               --max-messages \
               --offset \
               --partition \
               --property \
               --timeout-ms \
               --topic \
               --value-deserializer \
               --whitelist \
               --zookeeper"
    wfileargs="--consumer.config"
    wdirargs="--metrics-dir"
    opts="--csv-reporter-enabled \
          --delete-consumer-offsets \
          --enable-systest-events \
          --from-beginning \
          --new-consumer \
          --skip-message-on-error"

    allopts="$wotherarg $opts $wfileargs $wdirargs"

    case "$prev" in
        --bootstrap-server|--zookeeper)
            _known_hosts
            return 0
            ;;
        --consumer-property)
            _landoop-consumer-configs
            return 0
            ;;
        --isolation-level)
            _landoop-consumer-isolation-configs
            return 0
            ;;
        @(${wfileargs// /|}))
            _filedir
            return 0
            ;;
        @(${wdirargs// /|}))
            _filedir -d
            return 0
            ;;
        @(${wotherarg// /|}))
            return 0
            ;;
    esac

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${allopts}" -- ${cur}) )
        return 0
    fi
}

complete -F _landoop-kafka-console-consumer kafka-console-consumer
complete -F _landoop-kafka-console-consumer kafka-avro-console-consumer
complete -F _landoop-kafka-console-consumer kafka-console-consumer.sh
complete -F _landoop-kafka-console-consumer kafka-avro-console-consumer.sh
